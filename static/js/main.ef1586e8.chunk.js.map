{"version":3,"sources":["App.js","reportWebVitals.js","index.js","mocks/handlers.js","mocks/browser.js"],"names":["Header","amount","style","textAlign","display","className","Transactions","data","length","map","entry","index","timestamp","note","actionType","EntryModal","closeModal","sendFormData","useState","setAmount","setNote","disabled","setDisabled","useEffect","onClick","placeholder","onChange","event","target","value","ActionControl","setFormData","openModal","setOpenModal","type","setType","data-testid","App","currentAmount","setCurrentAmount","transactionData","setTransactionData","1","2","obj","Date","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","worker","start","ReactDOM","render","StrictMode","document","getElementById","handlers","rest","post","req","res","ctx","status","json","message","get","setupWorker"],"mappings":"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","file":"static/js/main.ef1586e8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\n\nimport \"./App.css\";\n\n// Header component to show the heading and the current balance\nconst Header = ({ amount }) => {\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1 style={{ display: \"inline-block\" }}>My Cashbook</h1>\n      <div className=\"today-balance\">\n        <h1>{`${amount} INR`}</h1>\n        <p>Today's Balance</p>\n      </div>\n    </div>\n  );\n};\n\n// Layout for the transaction table\nconst Transactions = ({ data }) => {\n  const transaction =\n    data.length > 0\n      ? data.map((entry, index) => {\n          return (\n            <div className=\"transaction\" key={index}>\n              <div className=\"entry\">\n                <Moment>{entry.timestamp}</Moment>\n                <h1>{entry.note}</h1>\n              </div>\n              <div className=\"entry out\">\n                <h1>Out</h1>\n                <div className=\"amount\">\n                  {entry.actionType === 2 ? entry.amount : \"-\"}\n                </div>\n              </div>\n              <div className=\"entry in\">\n                <h1>In</h1>\n                <div className=\"amount\">\n                  {entry.actionType === 1 ? entry.amount : \"-\"}\n                </div>\n              </div>\n            </div>\n          );\n        })\n      : \"\";\n\n  return transaction;\n};\n\n//  Entry modal setup\n\nconst EntryModal = ({ actionType, closeModal, sendFormData }) => {\n  const [amount, setAmount] = useState(0);\n  const [note, setNote] = useState(\"\");\n  const [disabled, setDisabled] = useState(true);\n\n  useEffect(() => {\n    if (amount && typeof amount === \"number\" && note) {\n      setDisabled(false);\n    } else {\n      setDisabled(true);\n    }\n  }, [amount, note]);\n\n  const onAmountChangeHandler = event => {\n    setAmount(+event.target.value);\n  };\n  const onNoteChangeHandler = event => {\n    setNote(event.target.value);\n  };\n\n  return (\n    <div className=\"model\">\n      <div className=\"model-content\">\n        <button className=\"close-btn\" onClick={closeModal}>\n          Close\n        </button>\n        <h3> New Entry</h3>\n        <input\n          placeholder=\"INR 0.0\"\n          onChange={onAmountChangeHandler}\n          value={amount}\n        ></input>\n        <textarea onChange={onNoteChangeHandler} value={note}></textarea>\n        <button\n          className={actionType === 1 ? \"green-btn\" : \"red-btn\"}\n          disabled={disabled}\n          onClick={() => {\n            sendFormData({ amount, note, actionType });\n            closeModal();\n          }}\n        >\n          {actionType === 1 ? \"IN\" : \"OUT\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\n// Action control component to take appropriate action\nconst ActionControl = ({ setFormData }) => {\n  const [openModal, setOpenModal] = useState(false);\n  const [type, setType] = useState();\n\n  const openInModal = () => {\n    setOpenModal(true);\n    setType(1);\n  };\n  const openOutModal = () => {\n    setOpenModal(true);\n    setType(2);\n  };\n\n  const closeModal = () => {\n    setOpenModal(false);\n  };\n\n  return (\n    <>\n      {openModal ? (\n        <EntryModal\n          actionType={type}\n          closeModal={closeModal}\n          sendFormData={setFormData}\n        />\n      ) : (\n        \"\"\n      )}\n      <div className=\"action-group\">\n        <button\n          className=\"red\"\n          data-testid=\"cashout-btn\"\n          onClick={openOutModal}\n        >\n          Out\n        </button>\n        <button\n          className=\"green\"\n          data-testid=\"cashout-btn\"\n          onClick={openInModal}\n        >\n          In\n        </button>\n      </div>\n    </>\n  );\n};\n\nconst App = () => {\n  const [currentAmount, setCurrentAmount] = useState(0);\n  const [transactionData, setTransactionData] = useState([]);\n\n  const formDataHandler = ({ amount, note, actionType }) => {\n    const finalAmount = {\n      1: currentAmount + amount,\n      2: currentAmount - amount\n    };\n    setCurrentAmount(finalAmount[actionType]);\n    const obj = { amount, note, actionType, timestamp: new Date() };\n    setTransactionData(transactionData => [...transactionData, obj]);\n    console.log(transactionData);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header amount={currentAmount} />\n      <Transactions data={transactionData} />\n      <ActionControl setFormData={formDataHandler} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst { worker } = require('./mocks/browser')\n\nworker.start()\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { rest } from 'msw'\n\nexport const handlers = [\n  rest.post('/entry', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n          message: 'entry created',\n      })\n    )\n  }),\n\n  rest.get('/entry', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json([])\n    )\n  })\n]\n","import { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n\nexport const worker = setupWorker(...handlers)\n"],"sourceRoot":""}